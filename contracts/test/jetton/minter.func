#include "libs/stdlib.func";
#include "minter/op.func";
#include "minter/params.func";
#include "minter/errors.func";
#include "libs/utils.func";
#include "minter/storage.func";

() mint_tokens(slice to_address, cell jetton_wallet_code, int amount, cell master_msg) impure {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(master_msg);
    send_raw_message(msg.end_cell(), 1);
}

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { 
        return ();
    }
    slice sender_address = cs~load_msg_addr();
  
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();


    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == ADMIN_MINT) {
        throw_unless(INVALID_AMOUNT, msg_value > MINT_FEE + PROCESS_FEE);
        throw_unless(UNAUTHORIZED, equal_slices(sender_address, admin_address));

        int jetton_amount = in_msg_body~load_coins();
        slice to_address = in_msg_body~load_msg_addr();

        var master_msg = begin_cell()
            .store_uint(INTERNAL_TRANSFER, 32)
            .store_uint(0, 64) 
            .store_coins(jetton_amount)
            .store_slice(my_address()) 
            .store_slice(to_address) 
            .store_coins(0) 
            .store_uint(0, 1)
        .end_cell();

        mint_tokens(to_address, jetton_wallet_code, MINT_FEE, master_msg);
        save_data(total_supply + jetton_amount, admin_address, content, jetton_wallet_code);
        return ();
    }

    if (op == UPDATE_ADMIN) {
        throw_unless(UNAUTHORIZED, equal_slices(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(total_supply, new_admin_address, content, jetton_wallet_code);
        return ();
    }

    if (op == UPDATE_CONTENT) {
        throw_unless(UNAUTHORIZED, equal_slices(sender_address, admin_address));
        save_data(total_supply, admin_address, in_msg_body~load_ref(), jetton_wallet_code);
        return ();
    }

    throw(0xffff);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    return (total_supply, -1, admin_address, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}
