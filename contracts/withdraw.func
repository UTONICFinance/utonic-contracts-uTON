#include "imports/stdlib.fc";
#include "libs/utils.func";
#include "minter/op.func";
#include "minter/params.func";
#include "withdraw/op.func";
#include "withdraw/params.func";
#include "withdraw/storage.func";

() init_withdraw_data (slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    (int withdraw_id, 
    _,
    _,
    _,
    _,
    int finished,
    slice owner_address, slice jetton_master_address, cell withdraw_code) = load_data();
    int query_id = in_msg_body~load_uint(64);
    int uton_amount = in_msg_body~load_coins();
    int ton_amount = in_msg_body~load_coins();
    int burn_timestamp = in_msg_body~load_uint(64);
    int burn_price = in_msg_body~load_uint(32);

    slice response_address = in_msg_body~load_msg_addr();
    throw_unless(707, equal_slices(jetton_master_address, sender_address));

    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = WITHDRAW_MIN_TON_STORAGE - min(ton_balance_before_msg, WITHDRAW_MIN_TON_STORAGE);
    msg_value -= (storage_fee + WITHDRAW_INIT_FEE);

    if ((response_address.preload_uint(2) != 0) & (msg_value > 0)) {
        var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
            .store_slice(response_address)
            .store_coins(msg_value)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(EXCESSES, 32)
            .store_uint(query_id, 64);
        send_raw_message(msg.end_cell(), 2);
    }

    save_data(
        withdraw_id,
        uton_amount,
        ton_amount,
        burn_timestamp,
        burn_price,
        finished,
        owner_address, jetton_master_address, withdraw_code);
}

() withdraw_ton (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
    (int withdraw_id,
    int uton_amount,
    int ton_amount,
    int burn_timestamp,
    int burn_price,
    int finished,
    slice owner_address, slice jetton_master_address, cell withdraw_code) = load_data();

    throw_unless(703, now() >= burn_timestamp + PENDING_TIME);
    throw_unless(704, finished == 0);
    int query_id = in_msg_body~load_uint(64);
    slice response_address = in_msg_body~load_msg_addr();

    throw_unless(705, equal_slices(owner_address, sender_address));
    throw_unless(706, ton_amount > 0);
    throw_unless(707, msg_value > fwd_fee + WITHDRAW_FEE + PROCESS_WITHDRAW_FEE);

    var msg_body = begin_cell()
        .store_uint(WITHDRAW_NOTIFICATION, 32)
        .store_uint(query_id, 64)
        .store_coins(ton_amount)
        .store_slice(owner_address)
        .store_uint(withdraw_id, 64)
        .store_slice(response_address)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_master_address)
        .store_coins(0)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body);

    send_raw_message(msg.end_cell(), 64);

    save_data(
        withdraw_id,
        uton_amount,
        ton_amount,
        burn_timestamp,
        burn_price,
        1,
        owner_address, jetton_master_address, withdraw_code);
}

() on_bounce (slice in_msg_body) impure {
    in_msg_body~skip_bits(32); ;; 0xFFFFFFFF
    (int withdraw_id,
    int uton_amount,
    int ton_amount,
    int burn_timestamp,
    int burn_price,
    int finished,
    slice owner_address, slice jetton_master_address, cell withdraw_code) = load_data();

    int op = in_msg_body~load_uint(32);
    throw_unless(709, op == WITHDRAW_NOTIFICATION);
    finished = 0;
    save_data(
        withdraw_id,
        uton_amount,
        ton_amount,
        burn_timestamp,
        burn_price,
        finished,
        owner_address, jetton_master_address, withdraw_code);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr();
    cs~load_coins();
    cs~skip_bits(1);
    cs~load_coins();
    int fwd_fee = cs~load_coins();

    int op = in_msg_body~load_uint(32);

    if (op == INIT_WITHDRAW_DATA) {
        init_withdraw_data(in_msg_body, sender_address, my_balance, fwd_fee, msg_value);
        return ();
    }

    if (op == WITHDRAW) { 
        withdraw_ton(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    throw(0xffff);
}

(int, int, int, int, int, int, slice, slice, cell) get_withdraw_data() method_id {
  return load_data();
}

;; _ supported_interfaces() method_id {
;;     return (
;;         123515602279859691144772641439386770278, ;; org.ton.introspection.v0
;;         311736387032003861293477945447179662681 ;; org.ton.jetton.wallet.v1
;;     );
;; }
