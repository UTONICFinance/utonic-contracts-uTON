#include "../common/params.func";

(int) get_workchain(slice address) inline {
  (int wc, _) = parse_var_addr(address);
  return wc;
}

() force_chain(int workchain, slice address, int error_code) impure inline {
  (int wc) = get_workchain(address);
  throw_unless(error_code, wc == workchain);
}

cell pack_jetton_wallet_data(int balance, int withdraw_cnt, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
  return  begin_cell()
    .store_coins(balance)
    .store_uint(withdraw_cnt, 64)
    .store_slice(owner_address)
    .store_slice(jetton_master_address)
    .store_ref(jetton_wallet_code)
  .end_cell();
}

cell calculate_jetton_wallet_state_init(
  slice owner_address, 
  slice jetton_master_address, 
  cell jetton_wallet_code
) inline {
  return begin_cell()
    .store_uint(0, 2)
    .store_dict(jetton_wallet_code)
    .store_dict(pack_jetton_wallet_data(
      0, 
      0,
      owner_address, 
      jetton_master_address, 
      jetton_wallet_code
    ))
    .store_uint(0, 1)
  .end_cell();
}

slice calculate_jetton_wallet_address(cell state_init) inline {
  return begin_cell()
    .store_uint(4, 3)
    .store_int(WORKCHAIN, 8)
    .store_uint(cell_hash(state_init), 256)
  .end_cell().begin_parse();
}

slice calculate_user_jetton_wallet_address(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
  return calculate_jetton_wallet_address(calculate_jetton_wallet_state_init(owner_address, jetton_master_address, jetton_wallet_code));
}

cell pack_withdraw_data(int withdraw_id, int uton_amount, int ton_amount, int burn_timestamp, int burn_price, int finished, slice owner_address, slice jetton_master_address) inline {
  return  begin_cell()
    .store_uint(withdraw_id, 64)
    .store_coins(uton_amount)
    .store_coins(ton_amount)
    .store_uint(burn_timestamp, 64)
    .store_uint(burn_price, 64)
    .store_uint(finished, 1)
    .store_slice(owner_address)
    .store_slice(jetton_master_address)
  ;; todo
  .end_cell();
}

cell calculate_withdraw_state_init(int withdraw_id, slice owner_address, slice jetton_master_address, cell withdraw_code) inline {
  return begin_cell()
    .store_uint(0, 2)
    .store_dict(withdraw_code)
    .store_dict(pack_withdraw_data(
      withdraw_id, 0, 0, 0, 0, 0,
      owner_address, 
      jetton_master_address
    ))
    .store_uint(0, 1)
  .end_cell();
}

slice calculate_withdraw_address(cell state_init) inline {
  return begin_cell()
    .store_uint(4, 3)
    .store_int(WORKCHAIN, 8)
    .store_uint(cell_hash(state_init), 256)
  .end_cell().begin_parse();
}

slice calculate_user_withdraw_address(slice owner_address, int withdraw_id, slice jetton_master_address, cell withdraw_code) inline {
  return calculate_withdraw_address(calculate_withdraw_state_init(withdraw_id, owner_address, jetton_master_address, withdraw_code));
}
