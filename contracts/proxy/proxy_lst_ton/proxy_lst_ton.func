#include "../../imports/stdlib.fc";
#include "../../libs/utils.func";

#include "../../common/op.func";
#include "../../common/errors.func";

#include "../../standard/op.func";

#include "../../minter/op.func";
#include "../../minter/params.func";
#include "../../minter/errors.func";

#include "../../wallet/params.func";

#include "op.func";
#include "errors.func";
#include "params.func";
#include "storage.func";

global int proxy_type;
global int proxy_id;
global int lst_ton_price;
global int capacity;
global slice utonic_minter_address;
global slice admin_address;
global slice lst_ton_wallet;
global slice lst_ton_receiver_address;

() load_global_data() impure inline {
    (
        proxy_type,
        proxy_id,
        lst_ton_price,
        capacity,
        utonic_minter_address,
        admin_address,
        lst_ton_wallet,
        lst_ton_receiver_address
    ) = load_data();
}

() save_global_data() impure inline {
    save_data(
        proxy_type,
        proxy_id,
        lst_ton_price,
        capacity,
        utonic_minter_address,
        admin_address,
        lst_ton_wallet,
        lst_ton_receiver_address
    );
}

(int) get_ton_amount(int lst_ton_amount, int current_lst_ton_price) inline {
    return lst_ton_amount * current_lst_ton_price / COMMON::PRICE_BASE;
}

() _send_lst_ton(int query_id, int amount, slice response_address, int send_all_fee) impure {

    var msg_body = begin_cell()
        .store_uint(JETTON::OP::TRANSFER, 32)
        .store_uint(query_id, 64) 
        .store_coins(amount)
        .store_slice(lst_ton_receiver_address) 
        .store_slice(response_address) 
        .store_coins(0) 
        .store_uint(0, 1)
    .end_cell();
    int msg_value = send_all_fee ? 0 : PROXYLST::TRANSFER_FEE;
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(lst_ton_wallet)
        ;; todo determine msg value for burn notification
        .store_coins(msg_value)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body);
    if (send_all_fee) {
        send_raw_message(msg.end_cell(), 64);
    } else {
        send_raw_message(msg.end_cell(), 1);
    }
}

() proxy_stake(int query_id, slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
   
    load_global_data();

    throw_unless(COMMON::ERR::WRONG_CALLER, equal_slices(lst_ton_wallet, sender_address));

    int lst_ton_amount = in_msg_body~load_coins();
    throw_unless(PROXYLST::ERR::CAPACITY_NOT_ENOUGH, capacity >= lst_ton_amount);
    capacity -= lst_ton_amount;
    save_global_data();
    slice user_address = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();
    throw_unless(COMMON::ERR::INVALID_AMOUNT, lst_ton_amount > 0);

    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = PROXYLST::MIN_TON_STORAGE - min(ton_balance_before_msg, PROXYLST::MIN_TON_STORAGE);

    throw_unless(
        COMMON::ERR::INSUFFICIENT_VALUE, 
        msg_value > 
        storage_fee
        + PROXYLST::TRANSFER_NOTIFICATION_FEE 
        + PROXYLST::TRANSFER_FEE
        + MINTER::MINT_FEE
        + WALLET::MINT_FEE
        + fwd_fee * 2
    );
    _send_lst_ton(query_id, lst_ton_amount, response_address, false);

    int remain_msg_value = msg_value 
        - PROXYLST::TRANSFER_NOTIFICATION_FEE 
        - PROXYLST::TRANSFER_FEE
        - storage_fee
        - fwd_fee - fwd_fee;

    ;; calculate ton amount
    int ton_amount = get_ton_amount(lst_ton_amount, lst_ton_price);

    ;; then send notify msg to utonic minter(jetton master)
    var notify_msg_body = begin_cell()
        .store_uint(COMMON::OP::STAKE, 32)
        .store_uint(query_id, 64)
        .store_uint(proxy_type, 32)
        .store_uint(proxy_id, 32)
        .store_coins(ton_amount)
        .store_slice(user_address)
        .store_slice(response_address)
        .end_cell();

    var notify_msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(utonic_minter_address)
        ;; todo determine msg value for burn notification
        .store_coins(remain_msg_value)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(notify_msg_body);

    send_raw_message(notify_msg.end_cell(), 1); 

}

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { 
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr();
    cs~load_coins();
    cs~skip_bits(1);
    cs~load_coins();
    int fwd_fee = cs~load_coins();

    if (in_msg_body.slice_empty?()) {
        ;; just deposit
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == JETTON::OP::TRANSFER_NOTIFICATION) {
        proxy_stake(query_id,in_msg_body,sender_address,balance,fwd_fee,msg_value);
        return ();
    }

    ;; admin operate
    if (op == PROXYLST::UPDATE_ADMIN) {
        load_global_data();
        throw_unless(COMMON::ERR::UNAUTHORIZED, equal_slices(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        admin_address = new_admin_address;
        save_global_data();
        return ();
    }

    if (op == PROXYLST::UPDATE_PRICE) {
        load_global_data();
        throw_unless(COMMON::ERR::UNAUTHORIZED, equal_slices(sender_address, admin_address));
        
        lst_ton_price = in_msg_body~load_uint(64);
        save_global_data();
        return ();
    }

    if (op == PROXYLST::UPDATE_PROXYLST_WALLET) {
        load_global_data();
        throw_unless(COMMON::ERR::UNAUTHORIZED, equal_slices(sender_address, admin_address));
        
        slice wallet = in_msg_body~load_msg_addr();
        lst_ton_wallet = wallet;
        save_global_data();
        return ();
    }

    if (op == PROXYLST::UPDATE_LST_TON_RECEIVER) {
        load_global_data();
        throw_unless(COMMON::ERR::UNAUTHORIZED, equal_slices(sender_address, admin_address));
        
        slice receiver = in_msg_body~load_msg_addr();
        lst_ton_receiver_address = receiver;
        save_global_data();
        return ();
    }

    if (op == PROXYLST::SEND_LST_TON) {
        load_global_data();
        throw_unless(COMMON::ERR::UNAUTHORIZED, equal_slices(sender_address, admin_address));
        int amount = in_msg_body~load_coins();
        slice response_address = in_msg_body~load_msg_addr();
        _send_lst_ton(query_id, amount, response_address, true);
        return ();
    }

    if (op == PROXYLST::UPDATE_CAPACITY) {
        load_global_data();
        throw_unless(COMMON::ERR::UNAUTHORIZED, equal_slices(sender_address, admin_address));
        capacity = in_msg_body~load_coins();
        save_global_data();
        return ();
    }

    throw(0xffff);
}

(int, int, int, int, slice, slice, slice, slice) get_proxy_lst_ton_data() method_id {
    load_global_data();
    return (
        proxy_type,
        proxy_id,
        lst_ton_price,
        capacity,
        utonic_minter_address,
        admin_address,
        lst_ton_wallet,
        lst_ton_receiver_address
    );
}