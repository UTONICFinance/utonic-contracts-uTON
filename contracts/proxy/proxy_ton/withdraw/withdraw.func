#include "../../../imports/stdlib.fc";
#include "../../../libs/utils.func";

#include "../../../common/op.func";
#include "../../../common/utils.func";
#include "../../../common/errors.func";

#include "../../../standard/op.func";

#include "../../../minter/params.func";

#include "../op.func";
#include "../params.func";

#include "op.func";
#include "params.func";
#include "storage.func";
#include "errors.func";

global int withdraw_id;
global int uton_amount;
global int ton_amount;
global int burn_price;
global int burn_timestamp;
global int withdraw_timestamp;
global int finished;
global slice owner_address;
global slice proxy_address;
global slice utonic_minter_address;


() load_global_data() impure inline {
    (
        withdraw_id,
        uton_amount, 
        ton_amount, 
        burn_price,
        burn_timestamp,
        withdraw_timestamp,
        finished,
        owner_address, 
        proxy_address,
        utonic_minter_address
    ) = load_data();
}

() save_global_data() impure inline {
    save_data(
        withdraw_id,
        uton_amount, 
        ton_amount, 
        burn_price,
        burn_timestamp,
        withdraw_timestamp,
        finished,
        owner_address, 
        proxy_address,
        utonic_minter_address
    );
}

() init_withdraw_data (slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    load_global_data();
    int query_id = in_msg_body~load_uint(64);
    burn_price = in_msg_body~load_uint(64);
    burn_timestamp = in_msg_body~load_uint(64);
    withdraw_timestamp = in_msg_body~load_uint(64);
    slice response_address = in_msg_body~load_msg_addr();
    
    slice coin_cell = in_msg_body~load_ref().begin_parse();
    uton_amount = coin_cell~load_coins();
    ton_amount = coin_cell~load_coins();

    throw_unless(COMMON::ERR::WRONG_CALLER, equal_slices(proxy_address, sender_address));

    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = WITHDRAW::MIN_TON_STORAGE - min(ton_balance_before_msg, WITHDRAW::MIN_TON_STORAGE);
    msg_value -= (storage_fee + WITHDRAW::INIT_FEE);

    if ((response_address.preload_uint(2) != 0) & (msg_value > 0)) {
        var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
            .store_slice(response_address)
            .store_coins(msg_value)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(OP::EXCESSES, 32)
            .store_uint(query_id, 64);
        send_raw_message(msg.end_cell(), 2);
    }
    save_global_data();
}

() withdraw_ton (slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    load_global_data();

    throw_unless(WITHDRAW::ERR::PENDING_TIME_NOT_EXPIRED, now() >= withdraw_timestamp);
    throw_unless(WITHDRAW::ERR::FINISHED, finished == 0);
    int query_id = in_msg_body~load_uint(64);
    slice recipient_address = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();

    throw_unless(COMMON::ERR::WRONG_CALLER, equal_slices(owner_address, sender_address));
    throw_unless(COMMON::ERR::INVALID_TON_AMOUNT, ton_amount > 0);

    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = WITHDRAW::MIN_TON_STORAGE - min(ton_balance_before_msg, WITHDRAW::MIN_TON_STORAGE);
    msg_value -= (storage_fee + WITHDRAW::WITHDRAW_FEE + fwd_fee);
    throw_unless(
        COMMON::ERR::INSUFFICIENT_VALUE, 
        msg_value > MINTER::QUERY_FEE
            + fwd_fee
            + WITHDRAW::QUERY_ACK_FEE
            + fwd_fee
            + PROXY_TON::WITHDRAW_FEE
    );
    var payload = begin_cell()
        .store_slice(recipient_address)
        .store_slice(response_address)
        .end_cell();

    var msg_body = begin_cell()
        .store_uint(COMMON::OP::QUERY, 32)
        .store_uint(query_id, 64)
        .store_ref(payload)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(utonic_minter_address)
        .store_coins(msg_value)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body);

    send_raw_message(msg.end_cell(), 1);
}


() query_ack (slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    load_global_data();

    throw_unless(WITHDRAW::ERR::FINISHED, finished == 0);
    throw_unless(COMMON::ERR::WRONG_CALLER, equal_slices(utonic_minter_address, sender_address));

    int query_id = in_msg_body~load_uint(64);
    int total_supply = in_msg_body~load_coins();
    int new_price = in_msg_body~load_uint(64);
    int new_price_inc = in_msg_body~load_uint(64);
    slice payload = in_msg_body~load_ref().begin_parse();
    slice recipient_address = payload~load_msg_addr();
    slice response_address = payload~load_msg_addr();

    int new_ton_amount = get_ton_amount(uton_amount, new_price);
    if (new_ton_amount < ton_amount) {
        ton_amount = new_ton_amount;
        burn_price = new_price;
    }

    finished = 1;
    save_global_data();

    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = WITHDRAW::MIN_TON_STORAGE - min(ton_balance_before_msg, WITHDRAW::MIN_TON_STORAGE);
    msg_value -= (storage_fee + WITHDRAW::QUERY_ACK_FEE + fwd_fee);
    throw_unless(
        COMMON::ERR::INSUFFICIENT_VALUE, 
        msg_value > PROXY_TON::WITHDRAW_FEE
    );

    if (ton_amount > 0) {
        var msg_body = begin_cell()
            .store_uint(PROXY_TON::OP::WITHDRAW_NOTIFICATION, 32)
            .store_uint(query_id, 64)
            .store_coins(ton_amount)
            .store_slice(owner_address)
            .store_slice(recipient_address)
            .store_uint(withdraw_id, 64)
            .store_slice(response_address)
            .end_cell();
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(proxy_address)
            .store_coins(msg_value)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(msg_body);

        send_raw_message(msg.end_cell(), 1);
    } else {
        refund_fee(query_id,response_address,msg_value);
    }
}

() on_bounce (slice in_msg_body) impure {
    in_msg_body~skip_bits(32); ;; 0xFFFFFFFF
    load_global_data();
    
    int op = in_msg_body~load_uint(32);
    throw_unless(WITHDRAW::ERR::BOUNCE_ERR_INVALID_OP, op == PROXY_TON::OP::WITHDRAW_NOTIFICATION);
    finished = 0;
    save_global_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr();
    cs~load_coins();
    cs~skip_bits(1);
    cs~load_coins();
    int fwd_fee = cs~load_coins();

    int op = in_msg_body~load_uint(32);

    if (op == WITHDRAW::OP::INIT_WITHDRAW_DATA) {
        init_withdraw_data(in_msg_body, sender_address, my_balance, fwd_fee, msg_value);
        return ();
    }

    if (op == WITHDRAW::OP::WITHDRAW) { 
        withdraw_ton(in_msg_body, sender_address, my_balance, fwd_fee, msg_value);
        return ();
    }

    if (op == COMMON::OP::QUERY_ACK) {
        query_ack(in_msg_body,sender_address,my_balance,fwd_fee,msg_value);
        return ();
    }

    throw(0xffff);
}

(int, int, int, int, int, int, int, slice, slice) get_withdraw_data() method_id {
    
    load_global_data();
    return (
        withdraw_id,
        uton_amount, 
        ton_amount, 
        burn_timestamp,
        withdraw_timestamp,
        burn_price,
        finished,
        owner_address, 
        proxy_address
    );
}
