#include "../../imports/stdlib.fc";
#include "../../libs/utils.func";


#include "../../standard/op.func";

#include "../../minter/op.func";
#include "../../minter/params.func";
#include "../../wallet/params.func";

#include "../op.func";
#include "../params.func";
#include "../errors.func";

#include "storage.func";
#include "params.func";

global int proxy_type;
global int proxy_id;
global int capacity;
global slice whale_address;
global slice minter_address;
global slice uton_receiver_address;
global slice admin_address;
global slice pending_admin_address;

() load_global_data() impure inline {
    (
        proxy_type,
        proxy_id,
        capacity,
        whale_address,
        minter_address,
        uton_receiver_address,
        admin_address,
        pending_admin_address
    ) = load_data();
}

() save_global_data() impure inline {
    save_data(
        proxy_type,
        proxy_id,
        capacity,
        whale_address,
        minter_address,
        uton_receiver_address,
        admin_address,
        pending_admin_address
    );
}

() _send_ton(int query_id, int ton_amount, slice ton_receiver) impure {
    var msg_to_ton_receiver = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(ton_receiver)
        .store_coins(ton_amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
        ;; .store_uint(PROXY_COMMON::OP::STAKE_SAVE, 32)
        ;; .store_uint(query_id, 64);
    send_raw_message(msg_to_ton_receiver.end_cell(), 1);
}

() proxy_stake(int query_id, slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
   
    load_global_data();
    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = PROXY_WHALE3::MIN_TON_STORAGE - min(ton_balance_before_msg, PROXY_WHALE3::MIN_TON_STORAGE);

    throw_unless(
        PROXY_COMMON::ERR::INSUFFICIENT_VALUE, 
        msg_value > PROXY_WHALE3::MINT_FEE
            + fwd_fee
            + MINTER::MINT_FEE
            + WALLET::MINT_FEE
    );

    int remain_value = msg_value 
        - PROXY_WHALE3::MINT_FEE
        - fwd_fee;

    int ton_amount = in_msg_body~load_coins();
    throw_unless(PROXY_COMMON::ERR::CAPACITY_NOT_ENOUGH, capacity >= ton_amount);
    capacity -= ton_amount;
    save_global_data();
    slice response_address = in_msg_body~load_msg_addr();

    ;; then send notify msg to utonic minter(jetton master)
    var notify_msg_body = begin_cell()
        .store_uint(PROXY_COMMON::OP::STAKE, 32)
        .store_uint(query_id, 64)
        .store_uint(proxy_type, 32)
        .store_uint(proxy_id, 32)
        .store_coins(ton_amount)
        .store_slice(uton_receiver_address)
        .store_slice(response_address)
        .end_cell();

    var notify_msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(minter_address)
        .store_coins(remain_value)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(notify_msg_body);

    send_raw_message(notify_msg.end_cell(), 1); 

}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; ignore bounced msg
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr();
    cs~load_coins();
    cs~skip_bits(1);
    cs~load_coins();
    int fwd_fee = cs~load_coins();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == PROXY_COMMON::OP::STAKE) {
        proxy_stake(query_id, in_msg_body, sender_address, my_balance, fwd_fee, msg_value);
        return ();
    }

    load_global_data();

    ;; admin
    if (op == PROXY_COMMON::OP::UPDATE_UTON_RECEIVER) {
        throw_unless(PROXY_COMMON::ERR::UNAUTHORIZED, equal_slices(sender_address, admin_address));
        uton_receiver_address = in_msg_body~load_msg_addr();
        save_global_data();
        return ();
    }

    if (op == PROXY_COMMON::OP::UPDATE_ADMIN) {
        throw_unless(PROXY_COMMON::ERR::UNAUTHORIZED, equal_slices(sender_address, admin_address));
        pending_admin_address = in_msg_body~load_msg_addr();
        save_global_data();
        return ();
    }

    if (op == PROXY_COMMON::OP::ACCEPT_ADMIN) {
        throw_unless(PROXY_COMMON::ERR::UNAUTHORIZED, equal_slices(sender_address, pending_admin_address));
        admin_address = pending_admin_address;
        save_global_data();
        return ();
    }

    if (op == PROXY_COMMON::OP::EXTRACT_ASSETS) {
        throw_unless(PROXY_COMMON::ERR::UNAUTHORIZED, equal_slices(sender_address, admin_address));
        int ton_amount = in_msg_body~load_coins();
        slice ton_receiver = in_msg_body~load_msg_addr();
        throw_unless(
            PROXY_COMMON::ERR::INSUFFICIENT_BALANCE, 
            my_balance <= ton_amount
                + fwd_fee
                + PROXY_WHALE3::MIN_TON_STORAGE
        );
        _send_ton(query_id,ton_amount,ton_receiver);
        return ();
    }

    if (op == PROXY_COMMON::OP::UPDATE_CAPACITY) {
        throw_unless(PROXY_COMMON::ERR::UNAUTHORIZED, equal_slices(sender_address, admin_address));
        capacity = in_msg_body~load_coins();
        save_global_data();
        return ();
    }

    throw(0xffff);
}

(int, int, int, slice, slice, slice, slice, slice) get_proxy_whale3_data() method_id {
    load_global_data();
    return (
        proxy_type,
        proxy_id,
        capacity,
        whale_address, 
        minter_address, 
        uton_receiver_address,
        admin_address,
        pending_admin_address
    );
}
