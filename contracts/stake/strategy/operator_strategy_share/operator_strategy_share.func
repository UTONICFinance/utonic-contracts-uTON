#include "../../imports/stdlib.fc";

#include "../../stake_utils.func";
#include "../../stake_errors.func";

#include "../../stake_op.func";
#include "../../stake_errors.func";

#include "operator_strategy_share_params.func";
#include "operator_strategy_share_op.func";

global int shares;
global slice operator_address;
global slice strategy_address;

() load_global_data() impure inline {
    (
        shares,
        operator_address,
        strategy_address
    ) = load_data();
}

() save_global_data() impure inline {
    save_data(
        shares,
        operator_address,
        strategy_address
    );
}

() update_shares(int is_add, int query_id, slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    load_global_data();
    throw_unless(STAKE::ERR::WRONG_CALLER, sender_address == strategy_address);
    int delta_shares = in_msg_body~load_coins();
    int need_ack = in_msg_body~load_uint(1);
    
    ;; believe strategy and donot check msg_value

    if (is_add) {
        shares += delta_shares;
    } else {
        ;; maybe we donot need check
        throw_unless(STAKE::ERR::INSUFFICIENT_SHARES, shares >= delta_shares);
        shares -= delta_shares;
    }
    save_global_data();

    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = OPERATOR_STRATEGY_SHARE::MIN_TON_STORAGE - min(ton_balance_before_msg, OPERATOR_STRATEGY_SHARE::MIN_TON_STORAGE);
    int remain_msg_value = msg_value 
        - storage_fee 
        - OPERATOR_STRATEGY_SHARE::UPDATE_FEE;

    slice response_address = in_msg_body~load_msg_addr();
    if (need_ack) {
        cell extra_payload = in_msg_body~load_ref();

        var msg_body = begin_cell()
            .store_uint(STAKE::OP::UPDATE_OPT_SHARE_ACK, 32)
            .store_uint(query_id, 64)
            .store_slice(operator_address)
            .store_slice(response_address)
            .store_ref(extra_payload)
            .end_cell();

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(strategy_address)
            ;; todo determine msg value for burn notification
            .store_coins(remain_msg_value)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(msg_body);
        send_raw_message(msg.end_cell(), 0);
    } else {
        refund_fee(query_id, response_address, remain_msg_value);
    }
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr();
    cs~load_coins();
    cs~skip_bits(1);
    cs~load_coins();
    int fwd_fee = cs~load_coins();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == STAKE::OP::ADD_OPT_SHARE) { 
        update_shares(true,query_id,in_msg_body,sender_address,my_balance,fwd_fee,msg_value);
        return ();
    }

    if (op == STAKE::OP::DEC_OPT_SHARE) { 
        update_shares(false,query_id,in_msg_body,sender_address,my_balance,fwd_fee,msg_value);
        return ();
    }

    throw(0xffff);
}

(int, slice, slice) get_operator_strategy_share_data() method_id {
    load_global_data();
    return (
        shares,
        operator_address,
        strategy_address
    );
}
