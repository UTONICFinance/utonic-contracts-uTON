#include "../imports/stdlib.fc";
#include "../common/common_params.func";
#include "minter_params.func";

const EVENT_STAKE = 1;
const EVENT_BURN = 2;
const EVENT_BURN_FOR_WHALE = 3;

() emit_stake_log(slice user_address, int proxy_type, int proxy_id, slice proxy_address, int ton_amount, int uton_amount, int price, int timestamp) impure {
    
    var msg_body = begin_cell()
        .store_uint(EVENT_STAKE, COMMON::EVENT_LEN)
        .store_slice(user_address)
        .store_uint(proxy_type, 32)
        .store_uint(proxy_id, 32)
        .store_slice(proxy_address)
        .store_coins(ton_amount)
        .store_coins(uton_amount)
        .store_uint(price, 64)
        .store_uint(timestamp, 64)
        .end_cell();

    var msg = begin_cell()
        .store_uint (12, 4)             ;; ext_out_msg_info$11 addr$00
        .store_uint (0, 2)              ;; dest addr$00
        .store_uint(1, 64 + 32 + 1 + 1) ;; lt, at, init, body
        .store_ref(msg_body)
        .end_cell();
    
    send_raw_message(msg, 0);

}

() emit_burn_log(slice user_address, int withdraw_id, int uton_amount, int ton_amount, int price, int timestamp, int proxy_type, int proxy_id, slice proxy_address) impure {

    var msg_body = begin_cell()
        .store_uint(EVENT_BURN, COMMON::EVENT_LEN)
        .store_slice(user_address)
        .store_uint(withdraw_id, 64)
        .store_coins(uton_amount)
        .store_coins(ton_amount)
        .store_uint(price, 64)
        .store_uint(timestamp, 64)
        .store_uint(proxy_type, 32)
        .store_uint(proxy_id, 32)
        .store_slice(proxy_address)
        .end_cell();

    var msg = begin_cell()
        .store_uint (12, 4)             ;; ext_out_msg_info$11 addr$00
        .store_uint (0, 2)              ;; dest addr$00
        .store_uint(1, 64 + 32 + 1 + 1) ;; lt, at, init, body
        .store_ref(msg_body)
        .end_cell();
    
    send_raw_message(msg, 0);
}
