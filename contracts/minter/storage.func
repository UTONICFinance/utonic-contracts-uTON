
(int, int, int, int, int, slice, cell, cell, cell) load_data() impure inline {
  slice ds = get_data().begin_parse();
  int lc_total_supply = ds~load_coins(); ;; total_supply
  int lc_last_price_day = ds~load_uint(32); ;; last_price_day
  int lc_last_price = ds~load_uint(64); ;; last_price
  int lc_price_inc = ds~load_uint(64); ;; price_inc
  int lc_debt_ton = ds~load_coins(); ;; debt_ton
  
  slice address_cell = ds~load_ref().begin_parse();
  slice lc_admin_address = address_cell~load_msg_addr(); ;; admin_address
  cell lc_proxy_whitelist = address_cell~load_dict(); ;; load dict of ordinary user proxy whitelist
  
  cell lc_content = ds~load_ref(); ;; content
  cell lc_jetton_wallet_code = ds~load_ref();

  return (
    lc_total_supply,
    lc_last_price_day,
    lc_last_price,
    lc_price_inc,
    lc_debt_ton,
    lc_admin_address,
    lc_proxy_whitelist,
    lc_content,
    lc_jetton_wallet_code
  );
}

() save_data(
    int lc_total_supply, 
    int lc_last_price_day, 
    int lc_last_price, 
    int lc_price_inc, 
    int lc_debt_ton, 
    slice lc_admin_address, 
    cell lc_proxy_whitelist,
    cell lc_content, 
    cell lc_jetton_wallet_code) impure inline {

  cell address_cell = begin_cell()
      .store_slice(lc_admin_address)
      .store_dict(lc_proxy_whitelist)
      .end_cell();

  set_data(begin_cell()
      .store_coins(lc_total_supply)
      .store_uint(lc_last_price_day, 32)
      .store_uint(lc_last_price, 64)
      .store_uint(lc_price_inc, 64)
      .store_coins(lc_debt_ton)
      .store_ref(address_cell)
      .store_ref(lc_content)
      .store_ref(lc_jetton_wallet_code)
      .end_cell()
    );
}