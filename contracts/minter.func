#include "imports/stdlib.fc";
#include "libs/utils.func";

#include "common/op.func";
#include "common/params.func";
#include "common/errors.func";

#include "standard/op.func";

#include "wallet/op.func";
#include "wallet/params.func";

#include "minter/op.func";
#include "minter/params.func";
#include "minter/errors.func";
#include "minter/storage.func";
#include "minter/events.func";
#include "minter/types.func";

global int total_supply; 
global int last_price_day;
global int last_price;
global int price_inc;
global slice admin_address;
global cell proxy_whitelist;
global cell content;
global cell jetton_wallet_code;

() load_global_data() impure inline {
    (total_supply, 
    last_price_day,
    last_price,
    price_inc,
    admin_address,
    proxy_whitelist,
    content,
    jetton_wallet_code) = load_data();
}

() save_global_data() impure inline {
    save_data(
        total_supply,
        last_price_day,
        last_price,
        price_inc,
        admin_address,
        proxy_whitelist,
        content,
        jetton_wallet_code);
}

(int) get_day(int timestamp) inline {
  return timestamp / COMMON::ONE_DAY;
}

(int) get_current_day() inline {
    return get_day(now());
}

(int) get_price(int last_price_day, int last_price, int price_inc, int current_day) inline {
  return last_price + (current_day - last_price_day) * price_inc;
}

(int) get_ton_amount(int uton_amount, int price) inline {
    return uton_amount * price / COMMON::PRICE_BASE;
}

(int) get_uton_amount(int ton_amount, int price) inline {
    return ton_amount * COMMON::PRICE_BASE / price;
}

() mint_tokens(int query_id, slice user_address, slice response_address, int uton_amount, int msg_value) impure {
    ;; then mint token for user
    var master_msg = begin_cell()
        .store_uint(WALLET::OP::MINT, 32)
        .store_uint(query_id, 64) 
        .store_coins(uton_amount)
        .store_slice(response_address) 
        ;; .store_coins(0) 
        .store_uint(0, 1)
    .end_cell();

    cell state_init = calculate_jetton_wallet_state_init(user_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(msg_value)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(master_msg);
    send_raw_message(msg.end_cell(), 0);
}

() proxy_stake(int query_id, slice sender_address, int msg_value, slice in_msg_body) impure {
   
    throw_unless(COMMON::ERR::INSUFFICIENT_VALUE, msg_value >= WALLET::MINT_FEE + MINTER::MINT_FEE);

    int proxy_type = in_msg_body~load_uint(32);
    int proxy_id = in_msg_body~load_uint(32);

    load_global_data();
    ;; throw_if(MINTER::ERR::EMPTY_PROXY_WHITELIST, proxy_whitelist.dict_empty?());

    (slice address_type, int has_address) = proxy_whitelist.udict_get?(32, proxy_id);
    throw_unless(MINTER::ERR::INVALID_PROXY_ID, has_address);
    slice real_address = address_type~load_msg_addr();
    int real_type = address_type~load_uint(32);

    throw_unless(MINTER::ERR::INVALID_PROXY, equal_slices(sender_address, real_address));
    throw_unless(MINTER::ERR::INVALID_PROXY_TYPE, real_type == proxy_type);
    
    int ton_amount = in_msg_body~load_coins();
    throw_unless(COMMON::ERR::INVALID_TON_AMOUNT, ton_amount > 0);
    int timestamp = now();
    int today = get_day(timestamp);
    int price = get_price(last_price_day, last_price, price_inc, today);
    int uton_amount = get_uton_amount(ton_amount, price);
    throw_unless(COMMON::ERR::INVALID_UTON_AMOUNT, uton_amount > 0);

    slice user_address = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();

    total_supply += uton_amount; 
    save_global_data();   

    mint_tokens(query_id, user_address, response_address, uton_amount, msg_value - MINTER::MINT_FEE);
    emit_stake_log(user_address, proxy_type, proxy_id, sender_address, ton_amount, uton_amount, price, timestamp);
}


() proxy_burn(int query_id, slice sender_address, int msg_value, slice in_msg_body) impure {
    
    load_global_data();

    slice from_address = in_msg_body~load_msg_addr();
    int withdraw_id = in_msg_body~load_uint(64);
    int uton_amount = in_msg_body~load_coins();
    int proxy_id = in_msg_body~load_uint(32);

    (slice address_type, int has_address) = proxy_whitelist.udict_get?(32, proxy_id);
    throw_unless(MINTER::ERR::INVALID_PROXY_ID, has_address);

    slice proxy_address = address_type~load_msg_addr();
    int proxy_type = address_type~load_uint(32);

    slice response_address = in_msg_body~load_msg_addr();
    
    ;; check wallet address
    throw_unless(COMMON::ERR::WRONG_CALLER, equal_slices(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code), sender_address));

    int fwd_value = in_msg_body~load_coins();
    throw_unless(COMMON::ERR::INSUFFICIENT_VALUE, msg_value >= MINTER::BURN_FEE + fwd_value);
    cell fwd_msg_body = in_msg_body~load_ref();

    ;; calculate ton amount
    int timestamp = now();
    int today = get_day(timestamp);
    int price = get_price(last_price_day, last_price, price_inc, today);
    int ton_amount = get_ton_amount(uton_amount, price);
    ;; reduce supply
    total_supply -= uton_amount;
    save_global_data();
    ;; send to proxy
    var msg_body = begin_cell()
        .store_uint(COMMON::OP::BURN_NOTIFICATION, 32)
        .store_uint(query_id, 64)
        .store_slice(from_address)
        .store_uint(withdraw_id, 64)
        .store_coins(uton_amount)
        .store_coins(ton_amount)
        .store_uint(price, 64)
        .store_uint(timestamp, 64)
        .store_slice(response_address)
        .store_coins(fwd_value)
        .store_ref(fwd_msg_body)
    .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(proxy_address)
        ;; todo determine msg value for burn notification
        .store_coins(msg_value - MINTER::BURN_FEE)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 0);

    emit_burn_log(from_address, withdraw_id, uton_amount, ton_amount, price, timestamp, proxy_type, proxy_id, proxy_address);
}

() update_proxy_whitelist(int query_id, slice sender_address, int msg_value, slice in_msg_body) impure {

    load_global_data();
    throw_unless(COMMON::ERR::UNAUTHORIZED, equal_slices(sender_address, admin_address));
    int proxy_id = in_msg_body~load_uint(32);
    int proxy_type = in_msg_body~load_uint(32);
    proxy_whitelist~udict_delete?(32, proxy_id);
    slice address = in_msg_body~load_msg_addr();
    ;;if (address.preload_uint(2) != 0) {
        slice address_type = begin_cell().store_slice(address).store_uint(proxy_type, 32).end_cell().begin_parse();
        proxy_whitelist~udict_set(32, proxy_id, address_type);
    ;;}
    save_global_data();
}


() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { 
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr();
    cs~load_coins();
    cs~skip_bits(1);
    cs~load_coins();
    int fwd_fee = cs~load_coins();

    if (in_msg_body.slice_empty?()) {
        ;; just deposit
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == COMMON::OP::STAKE) {
        proxy_stake(query_id, sender_address, msg_value, in_msg_body);
        return ();
    }

    if (op == JETTON::OP::BURN_NOTIFICATION) {
        proxy_burn(query_id, sender_address, msg_value, in_msg_body);
        return ();
    }

    ;; admin operate

    if (op == MINTER::OP::UPDATE_ADMIN) {
        load_global_data();
        throw_unless(COMMON::ERR::UNAUTHORIZED, equal_slices(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        admin_address = new_admin_address;
        save_global_data();
        return ();
    }

    if (op == MINTER::OP::UPDATE_PRICE) {
        load_global_data();
        throw_unless(COMMON::ERR::UNAUTHORIZED, equal_slices(sender_address, admin_address));

        int new_price = in_msg_body~load_uint(64);
        int new_price_inc = in_msg_body~load_uint(64);
        int today = get_current_day();        
        last_price_day = today;
        last_price = new_price;
        price_inc = new_price_inc;
        save_global_data();
        return ();
    }

    if (op == MINTER::OP::UPDATE_PRICE_INC) {
        load_global_data();
        throw_unless(COMMON::ERR::UNAUTHORIZED, equal_slices(sender_address, admin_address));
        
        int new_price_inc = in_msg_body~load_uint(64);
        int today = get_current_day();
        int price = get_price(last_price_day, last_price, price_inc, today);
        last_price_day = today;
        last_price = price;
        price_inc = new_price_inc;
        save_global_data();
        return ();
    }

    if (op == MINTER::OP::UPDATE_CONTENT) {
        load_global_data();
        throw_unless(COMMON::ERR::UNAUTHORIZED, equal_slices(sender_address, admin_address));
        content = in_msg_body~load_ref();
        save_global_data();
        return ();
    }

    if (op == MINTER::OP::UPDATE_PROXY_WHITELIST) {
        update_proxy_whitelist(query_id, sender_address, msg_value, in_msg_body);
        return ();
    }

    if (op == MINTER::OP::UPDATE_CODE_AND_DATA) {
        throw_unless(COMMON::ERR::UNAUTHORIZED, equal_slices(sender_address, admin_address));
        cell code = in_msg_body~load_ref();
        cell data = in_msg_body~load_ref();
        ifnot (code.cell_null?()) {
            set_code(code);
        }
        ifnot (data.cell_null?()) {
            set_data(data);
        }
        return ();
    }

    throw(0xffff);

}

(int, int, int, int, slice, cell, cell, cell) get_minter_data() method_id {
    load_global_data();
    return (total_supply, last_price_day, last_price, price_inc, admin_address, proxy_whitelist, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    load_global_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}

;; _ supported_interfaces() method_id {
;;     return (
;;         123515602279859691144772641439386770278, ;; org.ton.introspection.v0
;;         242422353946785872806511191513850808027 ;; org.ton.jetton.master.v1
;;     );
;; }
