#include "imports/stdlib.fc";
#include "discovery_params.func";

(slice, slice, slice) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(),
        ds~load_msg_addr(),
        ds~load_msg_addr()
    );
}

() save_data(slice discovery, slice wallet, slice owner) impure inline {
    set_data(
        begin_cell()
            .store_slice(discovery)
            .store_slice(wallet)
            .store_slice(owner)
        .end_cell()
    );
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    (slice discovery, slice wallet, slice owner) = load_data();

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == 1) {

        slice query_owner = in_msg_body~load_msg_addr();
        int include_address? = in_msg_body~load_uint(1);

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(discovery)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::provide_wallet_address(), 32)
            .store_uint(query_id, 64)
            .store_slice(query_owner)
            .store_uint(include_address?, 1)
            .end_cell();

        send_raw_message(msg, 64);
    }

    if (op == op::take_wallet_address()) {

        slice query_wallet = in_msg_body~load_msg_addr();
        cell ref = in_msg_body~load_maybe_ref();
        slice query_owner = query_wallet;
        if (~ cell_null?(ref)) {
            slice s = ref.begin_parse();
            query_owner = s~load_msg_addr();
        }
        save_data(discovery, query_wallet, query_owner);
        return ();
    }

    throw(0xffff);
}

(slice, slice, slice) get_receiver_data() method_id {
    return load_data();
}
