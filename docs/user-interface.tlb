// tlb of user interface


// 1. wallet.transfer
//    transfer user's uTon (as common jetton) to another address, 
//    the tlb bellow follows standard jetton's transfer interface
//    the message is sent to user's uTon wallet address

transfer#0f8a7ea5 query_id:uint64 amount:(VarUInteger 16) destination:MsgAddress
                  response_destination:MsgAddress custom_payload:(Maybe ^Cell)
                  forward_ton_amount:(VarUInteger 16) forward_payload:(Either Cell ^Cell)
                  = InternalMsgBody;

// 2. wallet.burn
//    burn user's uTon to get equal-value ton (similar to wTon's burn)
//    the tlb bellow follows standard jetton's burn interface
//    the message is sent to user's uTon wallet address

proxy_id:uint32
fwd_value:(VarUInteger 16)
fwd_msg_body:^Cell // arbitrary non-empty cell can be set
= BurnPayload;

burn#595f07bc query_id:uint64 
              burnAmount:(VarUInteger 16)
              response_destination:MsgAddress
              custom_payload:^(Hashmap 32 ^BurnPayload)
              = InternalMsgBody;

//  the tlb code above is equivalent to typescript code below
//
//  const burnPayload = beginCell()
        .storeUint(proxyId, 32) // proxyId
        .storeCoins(fwdValue) // fwdValue: Gas for forwarding processing
        .storeRef(beginCell().endCell()) // fwdMsgBody: Currently empty
        .endCell();
//  const customPayload = Dictionary.empty(Dictionary.Keys.Int(32), Dictionary.Values.Cell());
//  customPayload.set(0, burnPayload); // Store the payload in the custom_payload dictionary
//  const burnMessageBody = beginCell()
//      .storeUint(0x595f07bc, 32) // BURN Operation Code: 0x595f07bc
//      .storeUint(queryId, 64) // query_id
//      .storeCoins(burnAmount) // burnAmount: Number of coins burned (in nano)
//      .storeAddress(responseAddress) // response_address
//      .storeDict(customPayload) // custom_payloadï¼Œstore payload
//      .endCell()


// 3. proxy_ton.stake
//     stake uTon for user by depositing some equal-value ton
//     the message following is sent to proxy_ton
//

stake#00001000 query_id:uint64
               user_address:MsgAddress
               response_address:MsgAddress

// the tlb code above is equivalent to
//     following typescript code:
//
//     stakeMessageBody = beginCell()
//          .storeUint(0x00001000, 32) // STAKE Operation Code
//          .storeUint(queryId, 64)   // query_id
//          .storeAddress(userAddress) // stake uton for whom
//          .storeAddress(responseAddress) // response_address , Excess gas will be sent to this address
//          .endCell()
//     the "stakeMessage" is sent to proxy_ton


// 4. proxy_lst_ton.stake
//     stake uTon for user by depositing some equal-value lst-ton jetton (we provide 2 proxies for st-ton or ts-ton)
//     the tlb bellow follows standard jetton's transfer interface
//     
//     note: the message following is sent to proxy_lst_ton's lst_ton wallet, not to proxy_lst_ton itself!!
//     etc. for proxy_st_ton contract, message is sent to its st_ton wallet,
//         and for proxy_ts_ton contract, message is sent to its ts_ton wallet.
//

transfer#0f8a7ea5 query_id:uint64 lst_ton_amount:(VarUInteger 16) 
                  proxy_lst_ton_address:MsgAddress
                  response_address:MsgAddress 
                  custom_payload:(Maybe ^Cell)
                  fwd_value:(VarUInteger 16)
                  fwd_response_address:MsgAddress
                  = InternalMsgBody;

// the tlb code above is equivalent to
//     following typescript code:
//
//     const stakeMessageBody = beginCell()
//         .storeUint(0x0f8a7ea5, 32)// Transfer Operation Code
//         .storeUint(queryId, 64) // query_id
//         .storeCoins(lstTonAmount) // amount of lst ton to deposit
//         .storeAddress(proxyLstTonAddress) // should be proxy lst ton address
//         .storeAddress(responseAddress) // response address to receive excess gas
//         .storeDict(Dictionary.empty())
//         
//         // message value for forward message (etc message from proxy_lst_ton's wallet to proxy_lst_ton)
//         .storeCoins(fwdValue) 
//         .storeAddress(fwdResponseAddress) // response address for forward_message, usually the same as "responseAddress"
//         .endCell()


// 5. withdraw.withdraw
//     

withdraw#00004502 query_id:uint64 
                  recipient_address:MsgAddress
                  response_address:MsgAddress
                  = InternalMsgBody

// the tlb code above is equivalent to
//     following typescript code:
//
//      const withdrawMessageBody = beginCell()
//          .storeUint(0x00004502, 32) // WITHDRAW Operation Code
//          .storeUint(queryId, 64) // query_id
//          .storeAddress(recipientAddress)  // recipient_address , The withdrawal ton will be sent to this address
//          .storeAddress(responseAddress)  // response_address , Excess gas will be sent to this address
//          .endCell()